import { createSlice, createAsyncThunk, createSelector } from '@reduxjs/toolkit'
import { client } from '../../api/client'

const initialState = {
  posts: [],
  status: 'idle', // enum 'idle', 'pending', 'succeeded', 'failed'
  error: null,
}

export const fetchPosts = createAsyncThunk(
  'posts/fetchPosts', // action type used for generated lifecycle actions
  async () => {
    // payload creator callback function
    const response = await client.get('/fakeApi/posts')
    return response.posts
  }
)

// Save a new post to the API
export const createPost = createAsyncThunk(
  'posts/createPost', // action type
  async (initialPost) => {
    // We only pass an object of shape { title, content, user } to the API.
    // All other fields (like id, date, reactions) will be generated by the API
    const response = await client.post('/fakeApi/posts', { post: initialPost })

    // The response has the full post including the unique id generated by the API
    // This value will be passed as the action.payload to the auto-generated createPost.fulfilled action
    return response.post
  }
)

const postsSlice = createSlice({
  name: 'posts',
  initialState,
  reducers: {
    // Within createSlice, the state is just this slice's state
    postUpdated: {
      reducer: (sliceState, action) => {
        const { id, title, content } = action.payload // Destructure entire payload to document payload obj shape
        const post = sliceState.posts.find((post) => post.id === id)
        if (post) {
          post.title = title
          post.content = content
        }
        // TODO: Signal an error if the post.id does not exist!
      },
      // Specify a prepare callback so the caller knows exactly what args to pass
      prepare: (id, title, content) => {
        return {
          // Create the payload from our args
          payload: { id, title, content },
        }
      },
    },
    reactionAdded: (sliceState, action) => {
      const { id, reaction } = action.payload
      const post = sliceState.posts.find((post) => post.id === id)
      if (post) {
        post.reactions[reaction]++
      }
    },
  },
  extraReducers: {
    // Implement reducers for the lifecycle actions generated by async thunks
    [fetchPosts.pending]: (state, action) => {
      state.status = 'pending'
    },
    [fetchPosts.fulfilled]: (state, action) => {
      state.status = 'succeeded'
      state.posts = action.payload
    },
    [fetchPosts.rejected]: (state, action) => {
      state.status = 'failed'
      state.error = action.error.message
    },
    [createPost.fulfilled]: (state, action) => {
      state.posts.push(action.payload)

      // This action will be returned by the initial createPost dispatch
      // unless there was an error.
    },
  },
})

export default postsSlice.reducer

// export the actions created by createSlice()
export const { postUpdated, reactionAdded } = postsSlice.actions

// Define selectors to encapsulate the structure of the slice's state

// Note that `state` is global state here rather than slice's state,
// so we have to access slice state via state.posts
export const selectAllPosts = (rootState) => rootState.posts.posts

export const selectPostById = (rootState, postId) =>
  rootState.posts.posts.find((post) => post.id === postId)

// Returns a memoized selector which uses the input selectors to determine
// whether the output selector has changed
// -- Uses createSelector() from reselect which is exported with redux-toolkit
export const selectPostsByUser = createSelector(
  // Array of input selectors
  [
    selectAllPosts, // returns posts (1st arg to output selector)
    (state, userId) => userId, // returns userId (2nd arg to output selector)
  ],
  // output selector / transformer, which is only run if one of its inputs changes
  (posts, userId) => posts.filter((post) => post.user === userId)
)
